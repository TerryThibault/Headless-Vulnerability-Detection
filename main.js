const puppeteer = require('puppeteer');

async function run() {
	const browser = await puppeteer.launch(
		{
			headless: false
		});
	const page = await browser.newPage();
	var args = process.argv.slice(2);
	target_url = args[0]
	await crawl(target_url, page)
	// await page.goto(target_url)
	// await getAllForms(page)
}

async function crawl(target_url, page) {
	const hostname = await getHostName(target_url)
	await page.goto(target_url)
	var uniq_links = new Set()
	var not_visited_links = Array.from(uniq_links)
	console.log(not_visited_links)
	not_visited_links.push(target_url)
	uniq_links.add(target_url)
	while (not_visited_links.length > 0) {
		const curr_link = not_visited_links.shift()
		console.log('visiting ' + curr_link)
		await page.goto(curr_link)
		
		var links = await page.evaluate(() => {
        	return Array.from(document.querySelectorAll('a')).map(
        		link => link.href
    		);
		});
		links = Array.from(new Set(links))

		links.forEach( function(element) {
			if (!uniq_links.has(element) && isInScope(hostname, element)) {
				uniq_links.add(element)
				not_visited_links.push(element)
				console.log("adding " + element)
			}
		});
	}
	console.log(uniq_links);
}

function getHostName(url) {
    var match = url.match(/:\/\/(www[0-9]?\.)?(.[^/:]+)/i);
    if (match != null && match.length > 2 && typeof match[2] === 'string' && match[2].length > 0) {
    	return match[2];
    }
    else {
        return null;
    }
}

function isInScope(hostname, url) {
	var result = (getHostName(url) == hostname)
	// console.log("result " + result)
	return result
}

async function getAllForms(page) {
	var forms = await page.evaluate(() => {
  		forms = document.forms
  		return forms
	});
	page.XSSForms = forms
	console.log(page)
}

run(); 